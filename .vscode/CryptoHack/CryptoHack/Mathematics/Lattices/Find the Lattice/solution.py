#!/usr/bin/python3
from Crypto.Util.number import *
import numpy as np

def gauss(u, v):
    while True:
        if np.dot(u, u) < np.dot(v, v):
            u, v = v, u
        m = round(np.dot(v, u)/np.dot(v, v))
        if m == 0:
            return v[0], v[1]
        u = u - m * v


#From the output file
h, q = (2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800, 7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257)
enc_flag = 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523

v1, v2 = np.array((1, h)), np.array((0, q))

#decryption process

priv= gauss(v1,v2)
f,g = priv
a = (f*enc_flag) % q
m = (a*inverse(f, g)) % g
print (f'the flag is : {long_to_bytes(m).decode()}')
